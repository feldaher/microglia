#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Apr  2 19:38:43 2020

@author: feldaher
Aim: compute distance between CoG and the skin normal intercept
Input: 
	skin_outine.txt from manual freehand outline of the skin in IJ
	file_CoG.csv from intersection analysis 2D.py
		
"""
#inspired by https://stackoverflow.com/questions/19101864/find-minimum-distance-from-point-to-complicated-curve


import shapely.geometry as geom
import numpy as np
import os
import pandas as pd
from tkinter import Tk
from tkinter.filedialog import askopenfilename


Tk().withdraw() # we don't want a full GUI, so keep the root window from appearing
filenameSkin= askopenfilename() # show an "Open" dialog box and return the path to the selected file


   
#read skin outline coordinates from ImageJ manual freehand ROI
skin_coords = np.loadtxt(filenameSkin)

line = geom.LineString(skin_coords)

#Read coordinates of center of gravity from file generated by intersection analysis 2D.py
filenameCoG= askopenfilename() # show an "Open" dialog box and return the path to the selected file

directory = os.path.split(filenameCoG)[0]
   

# Read processed.csv files

dataCoG = pd.read_csv(filenameCoG)

cgx=pd.to_numeric(dataCoG["xCoG"])
cgy=pd.to_numeric(dataCoG["yCoG"])

point_CoG = geom.Point(cgx, cgy)

# Note that "line.distance(point_CoG)" would be identical
distance=point_CoG.distance(line)
print(distance)

point_on_line = line.interpolate(line.project(point_CoG))
print(point_on_line.x)
print(point_on_line.y)


# !! angle inverted on purpose angle = - arctan
angle=-np.degrees(np.arctan((cgy-point_on_line.y)/(cgx-point_on_line.x)))
print(angle[0])

d = {'x_skin': [point_on_line.x], 'y_skin': [point_on_line.y],'distance_CoG_skin': [distance],'angle':[angle[0]]}

df = pd.DataFrame(data=d)
truncate_filename=os.path.splitext(os.path.basename(filenameCoG))
df.to_csv(directory+'/'+truncate_filename[0]+'_CoG_analysis.csv', index = False, header=True)




